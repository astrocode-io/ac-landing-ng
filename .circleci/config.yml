version: 2.1
description: |
  copy files to S3 bucket and then create an Cloudfront invalidation
  on the distribution.

jobs:
  deploy:
    description: |
      Build the project and deploy to S3+Cloudfront
    docker:
      - image: circleci/node:12.18.3
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-node-{{ checksum "package.json" }}
            - dependencies-node
      - run:
          name: "Install dependencies and build"
          command: |
            npm install
            sudo npm i -g serverless
            export NG_CLI_ANALYTICS=false
            npm install --save-dev --save-exact @silvermine/serverless-plugin-cloudfront-lambda-edge
            npm run build
      - save_cache:
          name: "Saving cache"
          paths:
            - node_modules
          key: dependencies-node-{{ checksum "package.json" }}
      - run:
          name: "Setup environment"
          command: |
            alias=dev.astrocode.io
            stage=dev
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              stage=prod
              alias=astrocode.io
            fi

            echo "export S3_BUCKET=${CIRCLE_PROJECT_REPONAME}-${stage}" >> $BASH_ENV
            echo "export ALIAS=${alias}" >> $BASH_ENV
            echo "export STAGE=${stage}" >> $BASH_ENV
      - run:
          name: "Create infrastructure"
          command: |
            echo ${S3_BUCKET}
            echo ${ALIAS}
            echo ${STAGE}
            sls config credentials --provider aws --key ${AWS_ACCESS_KEY_ID} --secret ${AWS_SECRET_ACCESS_KEY} --region ${AWS_REGION}
            sls deploy --stage ${STAGE} -v
      - run:
          name: "Install PIP"
          command: sudo apt-get install python-pip python-dev
      - run:
          name: "Install awscli"
          command: sudo pip install awscli
      - run:
          name: "Deploy"
          command: |
            serverless syncToS3
      - run:
          name: "Domain info"
          command: |
            serverless domainInfo
      - run:
          name: "Invalidate CloudFront Cache"
          command: |
            serverless invalidateCloudFrontCache
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - deploy:
          filters:
            branches:
              only:
                - master
                - develop
          context: astrocode-io
